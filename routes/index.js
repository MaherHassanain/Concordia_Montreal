//===========================================================================
//						index.ejs
//				  Developed by Maher Hassanain
//						 June 2020
//===========================================================================
var express = require('express');
var router = express.Router();
const mongo = require('mongodb');
var assert = require('assert');
var url = 'mongodb://localhost:27017';
const collection = "yeastGenes";
const secondCollection = "metaData";
var fasta = require('bionode-fasta');
var fs = require('fs');
// var blast = require('blastjs');
//
// var type = 'nucl';
// var fileIn = './FASTA//sample.fasta';
// var outPath = './';
// var name = 'example';

// blast.makeDB(type, fileIn, outPath, name, function(err){
//   if(err){
//     console.error(err);
//   } else {
//     console.log('database created at', outPath);
//   }
// });

// fs.createReadStream('./FASTA/sample.fasta')
//     .pipe(fasta())
//     .pipe(process.stdout);
//
// fasta.obj('./FASTA/sample.fasta').on('data', console.log);

// fasta.obj('./input.fasta').on('data', console.log)

/* GET home page. */
router.get('/', function(req, res, next) {
  // insert_GSE4136_Yeast_Data();
  // insertNewColumn_GSE4136();

  // addAccessionGSE4136();

  // displayDB();
  // UN-COMMENT BEFORE LAUNCH

  convertFloatlogFC();

  mongo.connect(url,function(err, client) {
    assert.equal(null,err);
    var db = client.db('igemConcordia2020');
    db.collection(collection).find({}).limit(500).toArray((err, documents) => {
      if(err) {
        console.log(err);
      } else {
        console.log(documents.length);
        // console.log("test");
        res.render('index', { title: 'Home Page' , test: documents });
      }
    });
  })
});
router.get('/gene/:id', function(req,res,next) {
    mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var uniqueID = req.params.id;
        var db = client.db('igemConcordia2020');
        var temp = new mongo.ObjectID(req.params.id);
        db.collection(collection).find({"_id" : temp}).toArray((err,documents) => {
            if(err) {
                console.log("Error in fetching spicific gene results");
            } else {
                console.log("Fetch process for gene is successful");
                if(documents === undefined || documents.length === 0 || documents.length === null) {
                    console.log("No data found for this gene");
                    console.log("Now render to new page and display no data available");
                    client.close();
                    var message = "Nothing was found";
                    res.render('gene', {data: message , ID : uniqueID});
                } else {
                    console.log("Data available!");
                    console.log("Now render to new page and display data");
                    let temporary = documents[0].meta_data;
                    console.log(temporary);
                    db.collection(collection).find({"meta_data" : temporary}).toArray((error,doc) => {
                        if (error) {
                            console.log("Error in meta_data fetch");
                        } else {
                            console.log("meta_Data fetch successfully");
                            res.render('gene', {data : documents , meta : doc , ID : uniqueID});
                        }
                    })
                }
            }
        });
    });
    // res.render('gene', {output : req.params.id});
});
router.post('/', (req,res) => {
    const page = req.query.page;
    const limit = req.query.limit;
    console.log(page);
    console.log(limit);
    var organism = req.body.organism;
    var species = req.body.species;
    var egeod = req.body.EGEOD;
    var gene = req.body.geneSymbol;
    var logFC = req.body.fc;
    var PORF = req.body.adjpval;
    var study = req.body.studyType;
    var assay = req.body.assayType;
    JSON.stringify(organism);
    JSON.stringify(species);
    JSON.stringify(egeod);
    JSON.stringify(gene);
    JSON.stringify(logFC);
    JSON.stringify(PORF);
    JSON.stringify(study);
    JSON.stringify(assay);

  // console.log(species);
  // console.log(egeod);
  // console.log(gene);
  // console.log(PORF);

  if(species && egeod && gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("All input are set, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("All input are set, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("All input are set, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF}, {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("All input are set, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF}, {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("All input are set, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("All input are set, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("All input are set, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("All input are set, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("All input are set, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("All input are set, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}, {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("All input are set, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}, {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("All input are set, only organism and assay and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}, {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("All input are set, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("All input are set, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} ,{"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} ,{"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("All input are set, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} ,{"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} ,{"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("All input are set, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} ,{"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} ,{"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("All input are set, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} ,{"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} ,{"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  } else if(species && egeod && gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing PORF, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species}, {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species}, {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species}, {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} ,{"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only organism and assay and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType": assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing PORF, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  } else if(species && egeod && !gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing gene, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only organism and assay and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"Organism" : organism} , {"AssayType" : assay} , {"StudyType": study}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}, {"Organism" : organism} , {"AssayType" : assay} , {"StudyType": study}]
          }).sort({ "adj.P.Val" : -1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR THIRD CASE
    }
  } else if(species && egeod && !gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing gene and PORF, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}, {"Species" : species} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing gene and PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing gene and PORF, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod}, {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  } else if(species && !egeod && gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing egeod, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(species && !egeod && gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing egeod and PORF, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only logfc and study and  are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and PORF, only organism and logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and PORF, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(species && !egeod && !gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing egeod and gene, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }   else {
      // END OF OPTIONS INPUT FOR FOURTH CASE
    }
  }else if(species && !egeod && !gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing egeod and gene and porf, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Species" : species} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing egeod and gene and porf, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Species" : species} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(!species && egeod && gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : aasay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}, {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR # CASE
    }
  }else if(!species && egeod && gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}}, {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR # CASE
    }
  }else if(!species && egeod && !gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species and gene, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}}, {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}}, {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"Organism" : organism} ,  {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only organism and assay and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species and gene, only organism and logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species and gene, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF}, {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(!species && egeod && !gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, gene and PORF, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, gene and PORF, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species,, gene and PORF only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, gene and PORF, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, gene and PORF, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, gene and PORF, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"EGEOD" : egeod} , {"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, gene and PORF, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, gene and PORF, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"EGEOD" : egeod} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(!species && !egeod && gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}, {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"StudyType" : study} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"AssayType" : assay} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"StudyType" : study} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"StudyType" : study} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"Platform_ORF" : PORF} , {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(!species && !egeod && gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              var allMeta = [];
              for(var a = 0; a <documents.length; a++) {
                allMeta[a] = documents[a].meta_data;
              }
              // console.log(allMeta);
              var unique = allMeta.unique();
              // console.log(unique);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Gene.symbol" : gene} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Gene.symbol" : gene} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  }else if(!species && !egeod && !gene && PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and study are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Platform_ORF" : PORF} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} , {"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"Platform_ORF" : PORF} ,  {"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR FIRST CASE
    }
  } else if(!species && !egeod && !gene && !PORF) {
    if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL") {
      console.log("Input missing species, non of the options are set");
      // NO CRITERIA SELECTED NOTHING HAPPENS (MESSAGE TO PROMPT USER TO INSERT AT LEAST A SEARCH OPTION OUT OF 8
      var message = "Must select at least a single search option";
      res.render('search', {data: message});
    } else if(organism === "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only assay is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only study is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only study and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"AssayType" : assay} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc is set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only logfc and stud are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism === "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism is set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"AssayType" : assay} , {"Organism" : organism}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Organism" : organism} , {"StudyType" : study}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC === "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and assay  and study are set");
      mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        // let flt = pval;
        db.collection(collection).find({
          // "Gene.symbol" : temp
          $and : [{"Organism" : organism} , {"StudyType" : study} , {"AssayType" : assay}]
        }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
          if(err){
            console.log(err);
            client.close();
          } else {
            if(documents === undefined || documents.length === 0 || documents.length === null) {
              console.log("No data found for this gene");
              console.log("Now render to new page and display no data available");
              client.close();
              var message = "Nothing was found";
              res.render('search', {data: message});
            } else {
              console.log("Data available!");
              console.log("Now render to new page and display data");
              let temporary = documents[0].meta_data;
              console.log(temporary);
              db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                if(err) {
                  console.log("error in fetching meta data");
                } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                }
              });
              // console.log(documents);
            }
          }
        })
      });
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logf are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"Organism" : organism}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study === "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay === "ALL"){
      console.log("Input missing species, only organism and logfc and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    } else if(organism !== "ALL" && logFC !== "ALL" && study !== "ALL" && assay !== "ALL"){
      console.log("Input missing species, only organism and logfc and study and assay are set");
      if(logFC === "Up") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$gt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else if(logFC === "Down") {
        mongo.connect(url, function(err,client) {
          assert.equal(null,err);
          var db = client.db('igemConcordia2020');
          // let flt = pval;
          db.collection(collection).find({
            // "Gene.symbol" : temp
            $and : [{"logFC" : {$lt : 0.0}} , {"Organism" : organism} , {"AssayType" : assay} , {"StudyType" : study}]
          }).sort({ "adj.P.Val" : 1 }).limit(500).toArray((err,documents) => {
            if(err){
              console.log(err);
              client.close();
            } else {
              if(documents === undefined || documents.length === 0 || documents.length === null) {
                console.log("No data found for this gene");
                console.log("Now render to new page and display no data available");
                client.close();
                var message = "Nothing was found";
                res.render('search', {data: message});
              } else {
                console.log("Data available!");
                console.log("Now render to new page and display data");
                let temporary = documents[0].meta_data;
                console.log(temporary);
                db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
                  if(err) {
                    console.log("error in fetching meta data");
                  } else {
                  console.log("Meta-data fetched successfully");
                  // console.log(doc[0]);
                  // console.log(doc);
                  var metaData0 = [];
                  var metaData1 = [];
                  var metaData2 = [];
                  var counter = 0;
                  var counter1 = 0;
                  var counter2 = 0;
                  for(var i = 0 ; i < doc.length ; i++) {
                    if(doc[i].Link === "0") {
                      metaData0[counter] = doc[i];
                      counter++;
                    } else if(doc[i].Link === "1") {
                      metaData1[counter1] = doc[i];
                      counter1++;
                    } else if(doc[i].Link === "2") {
                      metaData2[counter2] = doc[i];
                      counter2++;
                    }
                  }
                  // console.log(metaData0);
                  client.close();
                  res.render('search', {data: documents , metaData : doc, metaData0 : metaData0, metaData1 : metaData1, metaData2: metaData2});
                  }
                });
                // console.log(documents);
              }
            }
          })
        });
      } else {
        // DETERMINE AT WHICH VALUE WOULD EXPRESSION CONSIDURED UNCHANGED
      }
    }  else {
      // END OF OPTIONS INPUT FOR # CASE
    }
  } else {
    // EDN OF IF AND ELSE MAIN
  }

  // if(organism === "ALL" && !species && logFC === "ALL" && !pVal) {
  //   console.log("all fields are empty");
  // } else if (organism !== "ALL" && !species && logFC === "ALL" && !pVal) {
  //   console.log("Only Organism specified");
  // } else if(organism === "ALL" && species && logFC === "ALL" && !pVal) {
  //   console.log("Only Species is specified");
  // } else if(organism === "ALL" && !species && logFC !== "ALL" && !pVal) {
  //   console.log("Only LOGFC is specified");
  // } else if(organism === "ALL" && !species && logFC === "ALL" && pVal) {
  //   console.log("Only adj.P.Val selected");
  // } else if(organism === "ALL" && !species && logFC === "ALL" && pVal) {
  //
  // } else if(organism === "ALL" && !species && logFC === "ALL" && pVal) {
  //
  // } else {
  //
  // }
});
// router.post('/', function(req,res) {
//   var temp = req.body.txt;
//   var logfc = req.body.fc;
//   var pval = req.body.adjpval;
//   var orf = req.body.platORF;
//   JSON.stringify(temp);
//   JSON.stringify(logfc);
//   JSON.stringify(pval);
//   JSON.stringify(orf);
//   // console.log(temp);
//   console.log(logfc);
//   // console.log(pval);
//
//   if(pval !== null && pval !== '' && pval !== undefined && temp !== null && temp !== '' && temp !== undefined) {
//     // search for all
//     console.log("All data filled up");
//
//     if(logfc === "Up") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         // let flt = pval;
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [{"Gene.symbol" : temp} , {"logFC" : {$gt : 0.0}} , {"adj.P.Val" : {$lt : parseFloat(pval)}}]
//         }).sort({ "logFC" : -1 }).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else if(logfc === "Down") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [{"Gene.symbol" : temp} , {"logFC" : {$lt : 0.0}} , {"adj.P.Val" : {$lt : parseFloat(pval)}}]
//         }).sort({"logFC" : 1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else {
//       // do nothing
//     }
//   } else if (temp !== null && temp !== '' && temp !== undefined && !pval) {
//     // search based on gene name
//     if(logfc === "Up") {
//       //find positive
//       // console.log("Uppppp");
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [{"Gene.symbol" : temp} , {"logFC" : {$gt : 0.0}}]
//         }).sort({"logFC" : -1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else if (logfc === "Down") {
//       // find negative
//       // console.log("Dowwwwwwwn");
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [{"Gene.symbol" : temp} , {"logFC" : {$lt : 0.0}}]
//         }).sort({"logFC" : 1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else {
//       // do Nothing, if someone wants to inject their own input
//     }
//   } else if(pval !== null && pval !== '' && pval !== undefined && !temp) {
//     // search based on pval limit
//     console.log("no gene name --- search for PVAL ONLY");
//     if(logfc === "Up") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [ {"adj.P.Val" : {$lt : parseFloat(pval)}} , {"logFC" : {$gt : 0.0}}]
//         }).sort({"logFC" : -1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else if (logfc === "Down") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           $and : [ {"adj.P.Val" : {$lt : parseFloat(pval)}} , {"logFC" : {$lt : 0.0}}]
//         }).sort({"logFC" : 1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     }  else {
//       // console.log("else last")
//     }
//   } else {
//     // No input specified, use the logFC dropdown as mean to view data
//     // console.log("last else");
//     if(logfc === "Up") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           "logFC" : {$gt : 0.0}
//         }).sort({"logFC" : -1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else if (logfc === "Down") {
//       mongo.connect(url, function(err,client) {
//         assert.equal(null,err);
//         var db = client.db('igemConcordia2020');
//         db.collection(collection).find({
//           // "Gene.symbol" : temp
//           "logFC" : {$lt : 0.0}
//         }).sort({"logFC" : 1}).limit(500).toArray((err,documents) => {
//           if(err){
//             console.log(err);
//             client.close();
//           } else {
//             if(documents === undefined || documents.length === 0 || documents.length === null) {
//               console.log("No data found for this gene");
//               console.log("Now render to new page and display no data available");
//               client.close();
//               var message = "Nothing was found";
//               res.render('search', {data: message});
//             } else {
//               console.log("Data available!");
//               console.log("Now render to new page and display data");
//               let temporary = documents[0].meta_data;
//               console.log(temporary);
//               db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//                 if(err) {
//                   console.log("error in fetching meta data");
//                 } else {
//                   console.log("Meta-data fetched successfully");
//                   // console.log(doc[0]);
//                   client.close();
//                   res.render('search', {data: documents , metaData : doc});
//                 }
//               });
//               // console.log(documents);
//             }
//           }
//         })
//       });
//     } else {
//       //nothing end of logfc if and else
//     }
//   }
//   // console.log(temp);
//
//   // if(temp !== null && temp !== '' && temp !== undefined) {
//   //   mongo.connect(url, function(err,client) {
//   //     assert.equal(null,err);
//   //     var db = client.db('igemConcordia2020');
//   //     db.collection(collection).find({ "Gene.symbol" : temp }).limit(500).toArray((err,documents) => {
//   //       if(err){
//   //         console.log(err);
//   //         client.close();
//   //       } else {
//   //         if(documents === undefined || documents.length === 0 || documents.length === null) {
//   //           console.log("No data found for this gene");
//   //           console.log("Now render to new page and display no data available");
//   //           client.close();
//   //           var message = "Nothing was found";
//   //           res.render('search', {data: message});
//   //         } else {
//   //           console.log("Data available!");
//   //           console.log("Now render to new page and display data");
//   //           let temporary = documents[0].meta_data;
//   //           console.log(temporary);
//   //           db.collection(secondCollection).find({}).limit(500).toArray((err,doc) => {
//   //             if(err) {
//   //               console.log("error in fetching meta data");
//   //             } else {
//   //               console.log("Meta-data fetched successfully");
//   //               // console.log(doc[0]);
//   //               client.close();
//   //               res.render('search', {data: documents , metaData : doc});
//   //             }
//   //           });
//   //           // console.log(documents);
//   //         }
//   //       }
//   //     })
//   //   });
//   // }
//
// });

// testInsertToDB();
function testInsertToDB() {
  var test = {
    Name: "Maher",
    Major : "IT"
  };
  mongo.connect(url, function(err,client) {
    assert.equal(null,err);
    var db = client.db('igemConcordia2020');
    db.collection(collection).insertOne(test, function(err,res) {
      assert.equal(null,err);
      console.log("Inserted to DB successfully");
      client.close();
    });
  });
}
function insertNewColumn_GSE4136(){
  mongo.connect(url,function(err,client) {
    assert.equal(null,err);
    var db = client.db('igemConcordia2020');
    db.collection(collection).update({},
        {$set : {"AccessionNumber":"GSE4136" }},
        {upsert:false,
          multi:true});
    console.log("added new column")
    // Client.close();
  })
}
function addAccessionGSE4136(){
  mongo.connect(url, function(err, client) {
    assert.equal(null,err);
    var db = client.db('igemConcordia2020');
    db.collection(collection).count((err, count) => {
      if(err) {
        console.log("Error in fetching from DB");
        client.close();
      } else {
        if (count !== 0 && !err) {
          db.collection(collection).find({ "AccessionNumber" : "GSE4136" }).toArray((err,documents) => {
            if(err){
                console.log(err);
                client.close();
            } else {
              if(documents === undefined || documents.length == null || documents.length === 0) {
                console.log("AccessionNumber is not in DB! add column!");
                // insertNewColumn_GSE4136();
                client.close();
              } else {
                console.log("column already exists for this study");
                client.close();
              }
            }
          })
        } else {
          console.log("GSE4136 column is already added");
          client.close();
        }
      }
    });
  });
}
function convertFloatlogFC() {
    // need to make a function to check if data is already changed to float or not, if already float then skip
    mongo.connect(url, function(err, client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');

        db.collection(collection).find().limit(2).toArray((err,documents) => {
          if(err) {
            console.log(err);
          } else {
            var temp = documents[0].logFC;
            var test = isFloat(temp);
            console.log(test);

            if(test) {
              // true
              //do nothing
              console.log("Float conversion already made");
            } else {
              // not float, convert string to float
              console.log("Convert string to float");
              db.collection(collection).find().forEach(function(data) {
                db.collection(collection).update({
                  "_id" :data._id,
                  "moop" : data.moop
                }, {
                  "$set" : {
                    "logFC" : parseFloat(data.logFC),
                    "adj.P.Val" : parseFloat(data.adj.P.Val),
                    "P.Value" : parseFloat(data.P.Value),
                    "t" : parseFloat(data.t),
                    "B" : parseFloat(data.B)
                  }
                });
              });
            }
          }
        });
    });
}
function displayDB() {
    mongo.connect(url, function(err,client) {
        assert.equal(null,err);
        var db = client.db('igemConcordia2020');
        db.collection(collection).find({}).sort({"adj.P.Val" : 1}).toArray((err,document) => {
            if(err) {
                console.log("error: " + err);
            } else {
                console.log("Data fetched and ready to display");
                for(var i = 0; i <document.length; i++) {
                    console.log(document[i].Gene.symbol);
                    console.log(document[i].adj.P.Val);
                    console.log(document[i].logFC);
                }
            }
        })
    })
}
function isFloat(n) {
  return Number(n) === n && n % 1 !== 0;
}
// let NCBIAPI = 'https://www.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=nuccore&term=mouse[orgn]'; // FORMAT
Array.prototype.contains = function(v) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] === v) return true;
  }
  return false;
}
Array.prototype.unique = function() {
  var arr = [];
  for (var i = 0; i < this.length; i++) {
    if (!arr.contains(this[i])) {
      arr.push(this[i]);
    }
  }
  return arr;
}

module.exports = router;
